import streamlit as st

# Import the grammar fix function from ai_insights module
# This helps clean up grammatical errors and duplicate words
from core.ai_insights import (
    get_default_audience_segments,
)

from assets.content import (
    PSYCHOGRAPHIC_HIGHLIGHTS,
    SITEONE_HISPANIC_PSYCHOGRAPHIC,
    AUDIENCE_SUMMARY,
    SITEONE_HISPANIC_SUMMARY,
)
from .audience_segment import display_audience_segment


def audience_insights(is_siteone_hispanic):
    # Psychographic Highlights
    st.markdown("""
    <h3 style="display:flex; align-items:center; gap:10px;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z" fill="#5865f2"/>
            <path d="M9 10.5C9.83 10.5 10.5 9.83 10.5 9C10.5 8.17 9.83 7.5 9 7.5C8.17 7.5 7.5 8.17 7.5 9C7.5 9.83 8.17 10.5 9 10.5ZM15 10.5C15.83 10.5 16.5 9.83 16.5 9C16.5 8.17 15.83 7.5 15 7.5C14.17 7.5 13.5 8.17 13.5 9C13.5 9.83 14.17 10.5 15 10.5ZM12 17C14.33 17 16.33 15.67 17.25 13.75L15.5 12.92C14.92 14.17 13.58 15 12 15C10.42 15 9.08 14.17 8.5 12.92L6.75 13.75C7.67 15.67 9.67 17 12 17Z" fill="#5865f2"/>
        </svg>
        Psychographic Highlights
    </h3>
    """, unsafe_allow_html=True)
    # Use SiteOne Hispanic psychographic data if this is a SiteOne Hispanic campaign
    if is_siteone_hispanic:
        st.markdown(SITEONE_HISPANIC_PSYCHOGRAPHIC, unsafe_allow_html=True)
    else:
        st.markdown(st.session_state.pychographic_highlights, unsafe_allow_html=True)
    
    # Import the learning tips module
    from app.components.learning_tips import display_tip_bubble
    
    # Create audience summary tooltip
    audience_summary_tip = display_tip_bubble("audience", "Audience Summary", inline=True)
    
    # Audience Summary
    st.markdown(f"""
    <h3 style="display:flex; align-items:center; gap:10px;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M16 11C17.66 11 18.99 9.66 18.99 8C18.99 6.34 17.66 5 16 5C14.34 5 13 6.34 13 8C13 9.66 14.34 11 16 11ZM8 11C9.66 11 10.99 9.66 10.99 8C10.99 6.34 9.66 5 8 5C6.34 5 5 6.34 5 8C5 9.66 6.34 11 8 11ZM8 13C5.67 13 1 14.17 1 16.5V19H15V16.5C15 14.17 10.33 13 8 13ZM16 13C15.71 13 15.38 13.02 15.03 13.05C16.19 13.89 17 15.02 17 16.5V19H23V16.5C23 14.17 18.33 13 16 13Z" fill="#5865f2"/>
        </svg>
        Audience Summary {audience_summary_tip}
    </h3>
    """, unsafe_allow_html=True)
    # Use SiteOne Hispanic audience summary if this is a SiteOne Hispanic campaign
    if is_siteone_hispanic:
        st.markdown(SITEONE_HISPANIC_SUMMARY, unsafe_allow_html=True)
    else:
        # st.markdown(AUDIENCE_SUMMARY, unsafe_allow_html=True)
        st.markdown(f"<strong>Core Audience:</strong> {st.session_state.audience_summary['core_audience']}", unsafe_allow_html=True)
        st.markdown(f"<strong>Primary Audience Signal:</strong> {st.session_state.audience_summary['primary_audience']}", unsafe_allow_html=True)
        st.markdown(f"<strong>Secondary Audience Signal:</strong> {st.session_state.audience_summary['secondary_audience']}", unsafe_allow_html=True)
    
    # Add audience segments section
    # If no audience segments are available yet, generate default ones for this section
    if 'audience_segments' not in st.session_state or st.session_state.audience_segments is None:
        if 'scores' in st.session_state and st.session_state.scores and 'brief_text' in st.session_state:
            st.session_state.audience_segments = get_default_audience_segments(
                st.session_state.brief_text, 
                st.session_state.scores
            )
    
    # Display audience segments (either generated by AI or default ones)
    if 'audience_segments' in st.session_state and st.session_state.audience_segments:
        try:
            # Import the learning tips module
            from app.components.learning_tips import display_tip_bubble
            
            # Create tooltip for Growth Audience Insights
            audience_insights_tip = display_tip_bubble("audience", "Growth Audience Insights", inline=True)
            
            # Title for the audience segments section
            title_html = f"""
            <div style="margin-top: 30px; margin-bottom: 15px;">
                <h3 style="display:flex; align-items:center; gap:10px;">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.4933 21.8731H6.50669C5.9091 21.8731 5.32949 21.652 4.88942 21.2537C4.44935 20.8554 4.19147 20.318 4.14859 19.7435L3.75744 15.1506C3.70675 14.4998 3.95313 13.8595 4.4291 13.4005C4.90507 12.9415 5.56466 12.6778 6.25079 12.6724H7.23084M12 11.4351V3M12 11.4351L9.23087 8.75662M12 11.4351L14.7692 8.75662" stroke="#5865f2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M20.2424 15.1507L19.8512 19.7436C19.8083 20.3181 19.5505 20.8556 19.1104 21.2538C18.6703 21.6521 18.0907 21.8732 17.4931 21.8732H6.50645C5.90887 21.8732 5.32926 21.6521 4.88919 21.2538C4.44911 20.8556 4.19124 20.3181 4.14835 19.7436L3.7572 15.1507C3.70652 14.5 3.9529 13.8596 4.42887 13.4006C4.90484 12.9416 5.56443 12.6779 6.25056 12.6725H17.749C18.4351 12.6779 19.0947 12.9416 19.5707 13.4006C20.0467 13.8596 20.293 14.5 20.2424 15.1507Z" stroke="#5865f2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    <span>Growth Audience Insights {audience_insights_tip}</span>
                </h3>
            </div>
            """
            st.markdown(title_html, unsafe_allow_html=True)
            
            # Import the learning tips module
            from app.components.learning_tips import display_tip_bubble
            
            segments = st.session_state.audience_segments
            
            # Check if we have segments in the expected format
            if 'segments' in segments and isinstance(segments['segments'], list) and len(segments['segments']) > 0:
                # Display all segments
                segment_list = segments['segments']
                
                # First display the primary segments (not the growth segment)
                if len(segment_list) > 1:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if len(segment_list) > 0:
                            primary_segment = segment_list[0]
                            display_audience_segment(primary_segment, 'Primary', '#10b981', '#f0fdf4')
                    
                    with col2:
                        if len(segment_list) > 1:
                            # For Apple TV+ campaigns, specifically use the "Lifestyle & Culture Enthusiasts" segment
                            if "Apple TV+" in st.session_state.get("brief_text", ""):
                                # Find the segment with the specific name
                                lifestyle_segment = next((segment for segment in segment_list if segment.get("name") == "Lifestyle & Culture Enthusiasts"), None)
                                if lifestyle_segment:
                                    secondary_segment = lifestyle_segment
                                else:
                                    secondary_segment = segment_list[1]
                            else:
                                secondary_segment = segment_list[1]
                            display_audience_segment(secondary_segment, 'Secondary Growth', '#6366f1', '#f5f7ff')

                # Try to find the emerging audience in the audience_data if available
                emerging_audience = None
                if 'audience_data' in st.session_state and st.session_state.audience_data is not None:
                    if 'emerging' in st.session_state.audience_data:
                        emerging_audience = st.session_state.audience_data['emerging']
                
                # If no emerging audience is found, select the last segment as the growth audience (if available)
                if emerging_audience is None:
                    if len(segment_list) > 2:
                        growth_segment = segment_list[-1]  # Use the last segment as growth opportunity
                    else:
                        # If we don't have at least 3 segments, use the last available one
                        growth_segment = segment_list[-1] if segment_list else None
                else:
                    # Use the emerging audience as our growth segment
                    growth_segment = emerging_audience
                    
                # Skip the rest if we don't have a growth segment
                if growth_segment:
                    # Format interests if available in interest_categories
                    interests = growth_segment.get('interest_categories', [])
                    interests_str = ", ".join(interests) if interests else "Identified through AI pattern recognition"
                    rationale = growth_segment.get('rationale', "")
                    
                    # Get platform strategy
                    platform_targeting = growth_segment.get('platform_targeting', [])
                    platform_strategy = ""
                    if platform_targeting:
                        strategies = []
                        for platform in platform_targeting:
                            if 'platform' in platform and 'targeting_approach' in platform:
                                strategies.append(f"{platform['platform']}: {platform['targeting_approach']}")
                        platform_strategy = " | ".join(strategies)
                    
                    if not platform_strategy:
                        platform_strategy = "Multi-platform approach with custom audience development"
                    
                    # Format demographic information
                    targeting_params = growth_segment.get('targeting_params', {})
                    demographics = []
                    
                    if targeting_params:
                        if 'age_range' in targeting_params:
                            demographics.append(f"Age: {targeting_params['age_range']}")
                        if 'gender_targeting' in targeting_params:
                            demographics.append(f"Gender: {targeting_params['gender_targeting']}")
                        if 'income_targeting' in targeting_params:
                            demographics.append(f"Income: {targeting_params['income_targeting']}")
                        if 'education_targeting' in targeting_params:
                            demographics.append(f"Education: {targeting_params['education_targeting']}")
                            
                    demographics_str = " | ".join(demographics) if demographics else "Custom targeting parameters based on first-party data"
                    
                    # Format bidding strategy if available
                    bidding_strategy = growth_segment.get('bidding_strategy', {})
                    bidding_str = ""
                    if bidding_strategy:
                        if 'bid_adjustments' in bidding_strategy:
                            bidding_str += f"Bid Adjustments: {bidding_strategy['bid_adjustments']}"
                        if 'dayparting' in bidding_strategy:
                            bidding_str += f" | Dayparting: {bidding_strategy['dayparting']}"
                    
                    # Get expected performance if available
                    performance = growth_segment.get('expected_performance', {})
                    performance_str = ""
                    # Check platform type to show appropriate metric name and value
                    video_platform = False
                    audio_platform = False
                    
                    if platform_strategy:
                        platform_lower = platform_strategy.lower()
                        if any(x in platform_lower for x in ['video', 'ott', 'ctv', 'streaming']):
                            video_platform = True
                        elif any(x in platform_lower for x in ['audio', 'podcast', 'music']):
                            audio_platform = True
                    
                    if performance:
                        metrics = []
                        if video_platform and 'CTR' in performance:
                            # VCR should be 90-100% for all CTV/OTT recommendations
                            vcr_range = "90-100%"
                            metrics.append(f"Expected VCR: {vcr_range}")
                        elif audio_platform and 'CTR' in performance:
                            # Show LTR instead of CTR for audio content with dynamic ranges based on audience
                            audience_name = growth_segment.get('name', '').lower()
                            interests = interests_str.lower()
                            # Determine appropriate LTR range based on audience characteristics
                            if 'young' in audience_name or 'gen z' in audience_name:
                                # Younger audiences tend to have lower LTR ranges
                                ltr_range = "80-90%"
                            elif 'fitness' in audience_name or 'health' in interests:
                                # Fitness audience has medium-high LTR
                                ltr_range = "80-90%"
                            elif 'professional' in audience_name or 'business' in interests:
                                # Professional audiences tend to have high LTR
                                ltr_range = "80-90%"
                            else:
                                # Check demographic targeting when available
                                age_range = targeting_params.get('age_range', '') if targeting_params else ''
                                if '18-34' in age_range:
                                    ltr_range = "80-90%"
                                elif '35-54' in age_range:
                                    ltr_range = "80-90%"
                                else:
                                    # Default if we can't determine specifics
                                    ltr_range = "80-90%"
                            metrics.append(f"Expected LTR: {ltr_range}")
                        elif 'CTR' in performance:
                            metrics.append(f"Expected CTR: {performance['CTR']}")
                        if 'CPA' in performance:
                            metrics.append(f"CPA: {performance['CPA']}")
                        if 'engagement_rate' in performance:
                            metrics.append(f"Engagement: {performance['engagement_rate']}")
                        performance_str = " | ".join(metrics)
                        
                    # Create tooltips for emerging audience section
                    emerging_audience_tip = display_tip_bubble("audience", "Emerging Audience Opportunity", inline=True)
                    demographics_tip = display_tip_bubble("audience", "Demographics", inline=True)
                    interests_tip = display_tip_bubble("audience", "Interest Categories", inline=True)
                    platform_strategy_tip = display_tip_bubble("audience", "Platform Strategy", inline=True)
                    
                    # Check if there's an AI insight for the growth segment
                    ai_insight = growth_segment.get('ai_insight', '')
                    ai_insight_html = ""
                    ai_insight_tip = display_tip_bubble("audience", "AI Insight", inline=True)
                    
                    if ai_insight:
                        ai_insight_html = f"""<div style="margin: 15px 0; padding: 10px; background-color: rgba(88, 101, 242, 0.1); border-radius: 6px; border-left: 3px solid #5865f2;">
<p style="margin: 0; font-size: 0.85rem; color: #333;">
<span style="font-weight:600; margin-right:5px; display:inline-block; color: #4338ca;">AI Insight {ai_insight_tip}:</span>
{ai_insight}
</p>
</div>"""
                    
                    # Create the emerging audience HTML content
                    html_content = f"""<div style="margin-top: 20px; padding: 20px; border-left: 4px solid #5865f2; background-color: #f5f7ff;">
<h4 style="margin-top: 0; color: #4338ca; display: flex; align-items: center;">
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 8px;">
<path d="M17.5 12C17.5 15.0376 15.0376 17.5 12 17.5C8.96243 17.5 6.5 15.0376 6.5 12M17.5 12C17.5 8.96243 15.0376 6.5 12 6.5C8.96243 6.5 6.5 8.96243 6.5 12M17.5 12H20.5M6.5 12H3.5M12 6.5V3.5M12 20.5V17.5M18.3 18.3L16.15 16.15M7.85 7.85L5.7 5.7M18.3 5.7L16.15 7.85M7.85 16.15L5.7 18.3" stroke="#4338ca" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
<circle cx="12" cy="12" r="2.5" fill="#4338ca"/>
</svg>
<span>Emerging Audience Opportunity {emerging_audience_tip}</span>
</h4>
<p style="margin-bottom: 8px;">
<span style="font-weight:600; font-size: 1.05rem;">{growth_segment.get('name', 'Emerging Growth Segment')}</span>
</p>
<p style="margin-bottom: 15px; font-style: italic; color: #555; font-size: 0.9rem;">
{growth_segment.get('description', 'This audience segment shows high potential for growth based on analysis of your brief and market trends.')}
</p>
{ai_insight_html}
<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Demographics {demographics_tip}</span>
{demographics_str}
</p>
<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Key Interests {interests_tip}</span>
{interests_str}
</p>
<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Platform Strategy {platform_strategy_tip}</span>
{platform_strategy}
</p>"""
                    
                    # Add optimization strategy if available
                    if bidding_str:
                        html_content += f"""<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Optimization Strategy:</span>
{bidding_str}
</p>"""
                    
                    # Add performance metrics if available
                    if performance_str:
                        html_content += f"""<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Expected Performance:</span>
{performance_str}
</p>"""
                    if rationale:
                        html_content += f"""<p style="margin-bottom: 8px;">
<span style="font-weight:600; margin-right:5px; display:inline-block;">Rationale:</span>
{rationale}
</p>"""

                    # Add Census demographics if available
                    demographics = growth_segment.get('demographics', {})
                    if demographics:
                        html_content += '<div style="margin-top: 16px; padding: 12px; background: rgba(255,255,255,0.6); border-radius: 6px; border: 1px solid rgba(0,0,0,0.08);">'
                        html_content += '<div style="display: flex; align-items: center; gap: 6px; margin-bottom: 8px;">'
                        html_content += '<span style="font-size: 0.8rem; font-weight: 600; color: #374151; letter-spacing: 0.3px;">DEMOGRAPHIC INSIGHTS</span>'
                        html_content += '</div>'
                        html_content += '<div style="margin-bottom: 10px; padding: 8px; background: rgba(59, 130, 246, 0.05); border-left: 3px solid #3b82f6; border-radius: 3px;">'
                        html_content += '<p style="margin: 0; font-size: 0.7rem; line-height: 1.4; color: #1e40af;">'
                        html_content += '<strong style="font-weight: 600;">Research-Backed Data:</strong> Demographics based on US Census data correlated with behavioral research using AI analysis. Each adjustment is backed by cited sources from Pew Research, Nielsen, McKinsey, and academic studies.'
                        html_content += '</p>'
                        html_content += '</div>'

                        for demo_name, values in demographics.items():
                            direction_arrow = "↗" if values['direction'] == 'up' else "↘" if values['direction'] == 'down' else "→"

                            # Gradient colors based on direction
                            if values['direction'] == 'up':
                                bar_gradient = "linear-gradient(90deg, #10b981 0%, #059669 100%)"
                                badge_bg = "rgba(16, 185, 129, 0.1)"
                                badge_color = "#059669"
                            elif values['direction'] == 'down':
                                bar_gradient = "linear-gradient(90deg, #ef4444 0%, #dc2626 100%)"
                                badge_bg = "rgba(239, 68, 68, 0.1)"
                                badge_color = "#dc2626"
                            else:
                                bar_gradient = "linear-gradient(90deg, #9ca3af 0%, #6b7280 100%)"
                                badge_bg = "rgba(107, 114, 128, 0.1)"
                                badge_color = "#6b7280"

                            html_content += '<div style="margin-bottom: 10px; padding: 8px; background: white; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05);">'
                            html_content += '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">'
                            html_content += f'<span style="font-size: 0.8rem; font-weight: 500; color: #1f2937;">{demo_name}</span>'
                            html_content += '<div style="display: flex; align-items: center; gap: 8px;">'
                            html_content += f'<span style="font-size: 0.75rem; color: {badge_color}; font-weight: 600;">({direction_arrow}{values["yoy_change"]:+.1f})</span>'
                            html_content += f'<span style="font-size: 0.95rem; font-weight: 700; color: #111827;">{values["final"]}%</span>'
                            html_content += '</div>'
                            html_content += '</div>'
                            html_content += f'<div style="position: relative; width: 100%; background-color: #f3f4f6; height: 8px; border-radius: 4px; overflow: hidden; box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);">'
                            html_content += f'<div style="width: {min(values["final"], 100)}%; background: {bar_gradient}; height: 100%; border-radius: 4px; transition: width 0.3s ease;"></div>'
                            html_content += '</div>'
                            html_content += '</div>'

                        html_content += '</div>'

                    # Close the div
                    html_content += """</div>"""
                    
                    # Display the HTML content
                    st.markdown(html_content, unsafe_allow_html=True)
        except Exception as e:
            # Silent fail - don't show error if there's an issue with the growth audience
            pass
